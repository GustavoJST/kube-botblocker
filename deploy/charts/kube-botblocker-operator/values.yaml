crds:
  # -- Whether the helm chart should create and update the CRDs. It is false by default, which implies that the CRDs must be
  # managed independently with the kube-botblocker-operator-crds helm chart.
  # **WARNING** This should only be set to true during the initial deployment. If this chart manages the CRDs
  # and is later uninstalled, all CRD instances will be DELETED.
  enabled: false

rbac:
  enabled: true

# [METRICS]: Set to true to generate manifests for exporting metrics.
# To disable metrics export set false, and ensure that the
# ControllerManager argument "--metrics-bind-address=:8443" is removed.
metrics:
  # -- Enable operator internal metrics. Prometheus must be installed in the cluster
  enabled: false
  # -- Change operator internal metrics port
  port: 8443
  serviceMonitor:
    enabled: true
    # -- Labels to be added to the controller ServiceMonitor
    additionalLabels: {}
    # --  Interval to scrape metrics
    interval: 30s
    # -- Timeout if metrics can't be retrieved in given time interval
    scrapeTimeout: 25s
    # MetricRelabelConfigs to apply to samples before ingestion.
    metricRelabelings: []
    # RelabelConfigs to apply to samples before scraping.
    relabelings: []


# [PROMETHEUS]: To enable a ServiceMonitor to export metrics to Prometheus set true
prometheus:
  enabled: false

# [CERT-MANAGER]: To enable cert-manager injection to webhooks set true
certmanager:
  enabled: false

currentNamespaceOnly: false

cleanupJob:
  enabled: true
  image:
    imagePullSecrets: []
    kubectl:
      registry: registry.k8s.io
      repository: ""
      tag: ""  # defaults to the Kubernetes version
      sha: ""
      pullPolicy: IfNotPresent


  env: {}
  ## Define resources requests and limits for single Pods.
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  ##
  resources: {}

  ## Additional volumes
  ##
  extraVolumes: []

  ## Additional volume mounts
  ##
  extraVolumeMounts: []

  ## Define which Nodes the Pods are scheduled on.
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ##
  nodeSelector: {}

  ## Assign custom affinity rules to the upgrade-crd job
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/e2e-az-name
  #         operator: In
  #         values:
  #         - e2e-az1
  #         - e2e-az2

  ## If specified, the pod's tolerations.
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  ##
  tolerations: []
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"

  ## If specified, the pod's topology spread constraints.
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
  ##
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #     matchLabels:
  #       app: alertmanager

  # ## Labels to add to the upgrade-crd job
  # ##
  labels: {}

  ## Annotations to add to the upgrade-crd job
  ##
  annotations: {}

  ## Labels to add to the upgrade-crd pod
  ##
  podLabels: {}

  ## Annotations to add to the upgrade-crd pod
  ##
  podAnnotations: {}

  ## Service account for upgrade crd job to use.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    labels: {}
    automountServiceAccountToken: true

  ## Container-specific security context configuration
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL

  ## SecurityContext holds pod-level security attributes and common container settings.
  ## This defaults to non root user with uid 1000 and gid 2000. *v1.PodSecurityContext  false
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

image:
  repository: controller
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - "ALL"
  # fsGroup: 2000

securityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
  requests:
    cpu: 100m
    memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  initialDelaySeconds: 15
  periodSeconds: 20
  httpGet:
    path: /healthz
    port: 8081
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  httpGet:
    path: /readyz
    port: 8081

nodeSelector: {}

tolerations: []

affinity: {}
